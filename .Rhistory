linetype = 2)+
theme_linedraw()
ggplot(aes(x = grade))+
geom_histogram()
ggplot(grades, aes(x = grade))+
geom_histogram()+
geom_vline(aes(xintercept = mean(grades$grade)))+
geom_vline(aes(xintercept = mean(grades$grade) - sd(grades$grade)),
linetype = 2)+
geom_vline(aes(xintercept = mean(grades$grade) + sd(grades$grade)),
linetype = 2)+
theme_linedraw()
ggplot(grades, aes(x = grade))+
geom_histogram(bins = 20)+
geom_vline(aes(xintercept = mean(grades$grade)))+
geom_vline(aes(xintercept = mean(grades$grade) - sd(grades$grade)),
linetype = 2)+
geom_vline(aes(xintercept = mean(grades$grade) + sd(grades$grade)),
linetype = 2)+
theme_linedraw()
ggplot(grades, aes(x = grade))+
geom_histogram(bins = 20)+
geom_vline(aes(xintercept = mean(grades$grade)))+
geom_vline(aes(xintercept = mean(grades$grade) - sd(grades$grade)),
linetype = 2)+
geom_vline(aes(xintercept = mean(grades$grade) + sd(grades$grade)),
linetype = 2)+
scale_x_continuous(name = 'score',
breaks = seq(20,110,5),
labels = seq(20,110,10))+
scale_y_continuous(name = 'count',
breaks = seq(0,15,3),
labels = seq(0,15,3))+
theme_linedraw()
ggplot(grades, aes(x = grade))+
geom_histogram(bins = 20)+
geom_vline(aes(xintercept = mean(grades$grade)))+
geom_vline(aes(xintercept = mean(grades$grade) - sd(grades$grade)),
linetype = 2)+
geom_vline(aes(xintercept = mean(grades$grade) + sd(grades$grade)),
linetype = 2)+
scale_x_continuous(name = 'score',
breaks = seq(20,110,10),
labels = seq(20,110,10))+
scale_y_continuous(name = 'count',
breaks = seq(0,15,3),
labels = seq(0,15,3))+
theme_linedraw()
sd(grades$grade)
t = read.csv('~/Desktop/final.csv')
table(t$Category)
knitr::kable(table(t$Category))
table(t$Category)
data_frame(table(t$Category))
dataframe(table(t$Category))
data.frame(table(t$Category))
knitr::kable(data.frame(table(t$Category)))
data.frame(table(t$Category)) %>%
rename(category = Var1, count = Freq) %>%
mutate(proportion = count/sum(count)) %>%
knitr::kable()
data.frame(table(t$Category)) %>%
rename(category = Var1, count = Freq) %>%
mutate(proportion = count/sum(count)) %>%
write.csv(file = '~/Desktop/finalCounts.csv', row.names = F)
final.grade = function(sona, section, peer, quiz, MR, FP, final){
1-(.03*sona + .07*section + .15*peer + .15*quiz + .1*MR)# + .25*FP + .25*final
}
quiz = mean(9,10,9,9)*10
quiz
sona = 100
section = 85
peer = 100
quiz = mean(9,10,9,9)*10
MR = 80
final.grade(sona, section, peer, quiz, MR)
(.03*sona + .07*section + .15*peer + .15*quiz + .1*MR)
final.grade = function(sona, section, peer, quiz, MR, FP, final){
100-(.03*sona + .07*section + .15*peer + .15*quiz + .1*MR)# + .25*FP + .25*final
}
sona = 100
section = 85
peer = 100
quiz = mean(9,10,9,9)*10
MR = 80
final.grade(sona, section, peer, quiz, MR)
mean(9,10,9,9)*10
(.03*sona + .07*section + .15*peer + .15*quiz + .1*MR)
FP = 80
final.grade(sona, section, peer, quiz, MR, FP)
final.grade = function(sona, section, peer, quiz, MR, FP, final){
100-(.03*sona + .07*section + .15*peer + .15*quiz + .1*MR + .25*FP) + .25*final
}
sona = 100
section = 85
peer = 100
quiz = mean(9,10,9,9)*10
MR = 80
FP = 80
final.grade(sona, section, peer, quiz, MR, FP)
final.grade = function(sona, section, peer, quiz, MR, FP, final){
100-(.03*sona + .07*section + .15*peer + .15*quiz + .1*MR + .25*FP)# + .25*final
}
sona = 100
section = 85
peer = 100
quiz = mean(9,10,9,9)*10
MR = 80
FP = 80
final.grade(sona, section, peer, quiz, MR, FP)
final.grade = function(sona, section, peer, quiz, MR, FP, final){
70-(.03*sona + .07*section + .15*peer + .15*quiz + .1*MR + .25*FP)# + .25*final
}
sona = 100
section = 85
peer = 100
quiz = mean(9,10,9,9)*10
MR = 80
FP = 80
final.grade(sona, section, peer, quiz, MR, FP)
4.55/.25
choose(2,1)
choose(3,2)
choose(7,2)
factorial(7)/(factorial(2)*factorial(7-2))
pWin = .65
kWins = 6
nGames = 12
pWin^kWins * (1-pWin)^(nGames-kWins) * choose(nGames, kWins)
dbinom(6,12,.65)
dbinom(0:nGames,nGames,pWin)
sum(dbinom(0:nGames,nGames,pWin))
cor(mtcars)
str(cor(mtcars))
Subject <- rep(1:5, each=10)
Condition <- rep(1:2, times=25)
x <- rnorm(50)
data <- as.data.table(cbind(Subject, Condition, x))
data
library(data.table)
Subject <- rep(1:5, each=10)
Condition <- rep(1:2, times=25)
x <- rnorm(50)
data <- as.data.table(cbind(Subject, Condition, x))
data
data <- as.data.frame(data)
data
Subject <- rep(1:5, each=10)
Condition <- rep(1:2, times=25)
x <- rnorm(50)
data <- as.data.table(cbind(Subject, Condition, x))
data <- data %>%
data_frame()
library(tidyverse)
Subject <- rep(1:5, each=10)
Condition <- rep(1:2, times=25)
x <- rnorm(50)
data <- as.data.table(cbind(Subject, Condition, x))
data <- data %>%
data_frame()
library(tidyverse)
Subject <- rep(1:5, each=10)
Condition <- rep(1:2, times=25)
x <- rnorm(50)
data <- as.data.table(cbind(Subject, Condition, x))
data <- data %>%
as.data_frame()
View(data)
library(tidyverse)
Subject <- rep(1:5, each=10)
Condition <- rep(1:2, times=25)
x <- rnorm(50)
data <- as.data.table(cbind(Subject, Condition, x))
data <- data %>%
as.data.frame() %>%
group_by(Subject, Condition) %>%
summarize(mean = mean(x))
data <- data %>%
as.data.frame() %>%
group_by(Subject, Condition) %>%
summarize(mean = mean(x)) %>%
spread(Condition, mean)
library(tidyverse)
Subject <- rep(1:5, each=10)
Condition <- rep(1:2, times=25)
x <- rnorm(50)
data <- as.data.table(cbind(Subject, Condition, x))
data <- data %>%
as.data.frame() %>%
group_by(Subject, Condition) %>%
summarize(mean = mean(x)) %>%
spread(Condition, mean)
install.packages('swirl')
# Addition
1 + 1
1 + 1
# Subtraction
1 - 1
# Addition
1 + 1
# Subtraction
1 - 1
# Multplication
2 * 2
# Square root
4^(1/2)
sqrt(4)
# logs
# warning: log(x) returns log in base e (natural log, ln)
log(10)
log10(10)
log2(8)
# PEMDAS
(1+1) / 2 ^ 2 * 2
# PEMDAS
(1 + 1) / 2^ 2*2
# PEMDAS
(1 + 1) / 2^ (2*2)
n = 1
2^n-5
2^(n-5)
# to store something into a variable you use: =
x = 3333
# to store something into a variable you use: =
x = 3333
# to store something into a variable you use: =
x = 3333
# when you run the line above, you see the statement print out into the console
# and you can see the variable with its stored contents in the enviroment window
# but if you want to see the contents of the variable printed out into the console
# you'll have to execute a line with the variable
x
# so that's cool you can store a number into a variable
# what else can you store into it?
y = 'you can store text'
yz =" use me too!"
y
yz
# notice the usage of ' around the text
# this is to let R know that the letters are not OTHER variables but actual text
# otherwise you store the contents of one variable in another
z = y
z
z2 = 'y'
z2
z2
z = 3
x
z
# You can treat numeric variables as you would in basic algebra
x * z
x + z
# does this change our variables?
x
z
x * z
# nope... that's good!
w = x * z
w
Z - x
# some other variable-defining no-nos:
# starting with a number
5abc = 1
# some other variable-defining no-nos:
# starting with a number
abc = 1
c(1, 2, 3, 4)
# Now, moving on the vectors, we can store more items into one variable
# here we use a function called c()
# whatever you put between () must be separated by a comma
e = c(1, 2, 3, 4)
e
# Vectors are a fundamental object in R:
37
1:5000
5000:1
f = c(1, "two", 3, 'four')
f
# The outputs for the variables e and f looking a bit different for numeric values
# the former doesn't have parentheses but the latter does
# using the function str(VARIABLE HERE), we can check out the type/structure of context stored
str(e)
str(f)
str(seq(400,1000,4))
#' Instead, you can say:
1:100
f
f[1]
f[0]
# This also works with variables:
x = -25
y = 25
x:y
seq(from = 0, to = 100, by = 5)
seq(from = 0, to = 100, by = -5)
seq(from = 100, to = 0, by = -5)
f[-1]
f[50]
f[0]
?seq
seq(0,100,5)
seq(from = 0, to = 100, by = 5)
seq(to = 100, from = 0, by = 5)
seq(.3246362, 5.141, .0234)
rep(x = 1:5, each = 5)
rep(x = 1:5, times = 5)
rep('stats ', 10)
# unlike varibles that contain single values that can be used as is
# with variables that store vectors/matricies, calculations are done differently
# for example running e + e, first value of both variables are added, second values are added, etc.
e
e + e
# Now, moving on the vectors, we can store more items into one variable
# here we use a function called c()
# whatever you put between () must be separated by a comma
e = c(1, 2, 3, 4)
yz
# Now, moving on the vectors, we can store more items into one variable
# here we use a function called c()
# whatever you put between () must be separated by a comma
e = c(1, 2, 3, 5)
e
e + e
# same for other functions
e * e
h = 4:7999
h2 = h^2
h2
# To check that our vector hasn't grown in length, we can use the length() function:
length(h)
length(h2)
c(c(1,2,3,4),c(5,6,7,8))
# what if we want to actually tack one vector onto the end of another?
h = c(5,6,7,8)
eh = c(e,h)
eh
# if you want to know how much the values add up to in a vector, you use the sum() function
sum(e)
e
sum(e + e)
sum(e * e)
# Now that we've learned how to store information into vectors/matrices
# how do we access individual values?
# to do this we use square brackets [] after the variable
e
e[1] # this should print out 1
e[0] # other programming languages iterate starting at 0, by convention R starts at 1
e[2]
f
f[1] # although this ALSO prints 1, the structure of this value is a string
e[1] * 5
f[1] * 5
f[1]
e
e[-1]
e[length(e)]
length(e)
e[length(e)]
e
#
e
e[1] = 111
e
e[1] = c(444)
e
e[1] = c(444,50)
e[1:4] = c(444,50)
e
grads = c('Taylor', 'Sean', 'Min Ju', 'Kathleen', 'Anna','Kelsey', 'Jonas','Jarrett')
years = c(3,3,3,3,3,3,6,4)
grads
years
grad.data = data.frame(Student = grads, Year = years)
grad.data
grad.data = data.frame(grads, years)
grad.data
grad.data$Department
grad.data$Department = 'Psychology'
grad.data$Department
grad.data
grad.data[1]
grad.data[1,4]
grad.data[1,3]
4 == 5
4 == 4
e = 4
e == 4
grad.data$Student
grad.data = data.frame(Student = grads, Year = years)
grad.data$Student
grad.data$Student == 'Sean'
grad.data$Student[grad.data$Student == 'Sean']
grad.data[grad.data$Student == 'Sean','Year']
grad.data
grad.data[grad.data$Student == 'Jonas','Advisor'] = 'Pashler'
grad.data
rownames(grad.data)
# Just like we have column names, we can also have row names if we want
rownames(grad.data) = grads
grad.data
# If the student names variable is now redundant, we can delete it:
grad.data$Student = NULL
grad.data
grad.data
# and now we can refer to rows by name:
grad.data['Jarrett',2] = 'Rickard/Pashler'
grad.data
# and now we can refer to rows by name:
grad.data['Jarrett','Advisor'] = 'Rickard/Pashler'
grad.data
grad.data[,'Advisor'] = 1:nrow(grad.data)
grad.data
grad.data[,'Advisor']
grad.data$Advisor
grad.data.2 = grad.data[rownames(grad.data)!='Jarrett',]
grad.data.2
grad.data.3 = grad.data[grad.data$Year<4,]
grad.data.3
grad.data.3 = grad.data[grad.data$Student != 'Kathleen',]
grad.data.3
grad.data.3 = grad.data[rownames(grad.data) != 'Kathleen',]
grad.data.3
grad.data.3 = grad.data[rownames(grad.data) != 'Kathleen' & grad.data$Advisor != 6,]
grad.data.3
grad.data
grad.data[rownames(grad.data) != 'Kathleen'
| grad.data$Advisor != 6,]
# there are many other useful functions within R that execute operations that you may use frequently.
# for a quick view of all of the variables currently stored
ls()
# to delete a variable -- THIS CANNOT BE UNDONE. good reason to keep your code!
v = "Help me!"
v
rm(v)
v
rm(eh, e, f)
rm(list=ls())
# if you are want some more information about a particular function, just add ? at the beginning
?c()
?mutate
library(dplyr)
?mutate
# in the documentation, you'll also see {} after the function name to tell you what package
# the function is built into. so far everything we've used is built directly into R as {base}
# but sometimes the functions you want to use are considered addons or libraries
# For example, the t-test function below is within the {stats} library
?t.test
# let's give the t.test function a try:
# first we'll set up a vector of values
x1 = c(1, 2, 3, 4, 5)
t.test(x1)
t.test(x1, 2.5)
t.test(x1, mu=2.5)
# if you were to calculate this formulaically, you would get the same t-value
# assuming that the population mean is 0 (default). you can also DEFINE the population mean
t.test(x1, mu = 3)
mean(x1)
# and if you had two samples and want to run a independent t-test:
x2 = c(6.5, 7, 8.5, 9, 10.5)
t.test(x1, x2)
cohens.d(x1,x2)
effsize::cohen.d(x1,x2)
x1 = c(65, 80, 71, 50, 75, 90)
x2 = c(71, 87, 71, 60, 64, 94)
d = x2 - x1
d2 = d ^ 2
d
d2
sum(d)
sum(d2)
mean(d)
SS = sum(d2) - sum(d)^2 / length(d)
s2 = SS / (length(d) - 1)
s = sqrt(s2)
smd = s / sqrt(length(d))
t = mean(d) / smd
t
#
# # Here it is with the built-in t.test function
t.test(x2, x1, paired = TRUE)
library(help = "ggplot2")
install.packages('ggplot2')
# to load a particular library that you have installed:
library(dplyr)
library(ggplot2)
# Quick visualization example:
rand = data_frame(IQ = round(rnorm(10000,100,15))) # data_frame() is from tidyverse
# Quick visualization example:
rand = data_frame(IQ = round(rnorm(10000,100,15))) # data_frame() is from tidyverse
rand
glimpse(rand)
str(rand)
summary(rand)
ggplot(rand, aes(x= IQ)) +
geom_histogram(color='black', fill='magenta')+
scale_y_continuous(name='Frequency')+
theme_linedraw()
# to load a particular library that you have installed:
library(tidyverse)
# to load a particular library that you have installed:
library(tidyverse)
library(ggplot2)
ggplot(rand, aes(x= IQ)) +
geom_histogram(color='black', fill='magenta')+
scale_y_continuous(name='Frequency')+
theme_linedraw()
?ggplot
library(ggplot2)
?ggplot
setwd(wd)
wd = '~/Documents/UCSD/Research/Process-Shift/'
setwd(wd)

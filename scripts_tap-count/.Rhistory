timeDurationS1 <- lapply(timeDurationS1, function(x) { gsub('.{4}$', '', x)})
timeDurationS1 <- as.data.frame(timeDurationS1)
# Make values type date
timeDurationS1 <- as.data.frame(lapply(timeDurationS1, function(x) {ymd_hms(x,timeDurationS1)}))
# For some reason add extra row  and need to remove them - could use na.omit?
timeDurationS1 <- na.omit(timeDurationS1)
# Experiment Duration
timeDurationS1$totalTime <- timeDurationS1$timeEnd - timeDurationS1$timeStart
demographicsS1 <- t(c(ageS1, sexS1, mean(timeDurationS1$totalTime)))
colnames(demographicsS1) <- c("Age", "Sex (F)", "Total Experiment Duration")
# Session 2
# Demographics
timeDurationS2 <- Session2[Session2$subject %in% Session1$subject,]
ageS2 <- mean(as.numeric(timeDurationS2$age))
sexS2 <- mean(as.numeric(as.factor(unlist(timeDurationS2$sex))))
# % of females
sexS2 <- 2-sexS2
# Total duration
# Clean strings to get a workable format
S2ID <- t(as.data.frame(timeDurationS2$subject))
timeDurationS2 <- timeDurationS2 %>%
select(c(timeStart, timeEnd))
timeDurationS2 <- lapply(timeDurationS2, function(x) { gsub("Z", "", x) })
timeDurationS2 <- lapply(timeDurationS2, function(x) { gsub("T", " ", x) })
timeDurationS2 <- lapply(timeDurationS2, function(x) { gsub('.{4}$', '', x)})
timeDurationS2 <- as.data.frame(timeDurationS2)
# Make values type date
timeDurationS2 <- as.data.frame(lapply(timeDurationS2, function(x) {ymd_hms(x,timeDurationS2)}))
timeDurationS2 <- na.omit(timeDurationS2)
# Experiment Duration
timeDurationS2$totalTime <- timeDurationS2$timeEnd - timeDurationS2$timeStart
demographicsS2 <- t(c(ageS2, sexS2, mean(timeDurationS2$totalTime)))
colnames(demographicsS2) <- c("Age", "Sex (F)", "Total Experiment Duration")
# Calculate retention Interval between sessions
RIS1 <- cbind.data.frame(S1ID, timeDurationS1$timeEnd)
RIS1 <- cbind.data.frame(RIS1, condition)
RIS2 <- cbind.data.frame(S2ID, timeDurationS2$timeStart)
RIS1 <- RIS1[order(RIS1$S1ID),]
RIS2 <- RIS2[order(RIS2$S2ID),]
RI <- as.data.frame(difftime(RIS2$`timeDurationS2$timeStart`, RIS1$`timeDurationS1$timeEnd`, units="hours"))
RI <- cbind(RI, RIS1$condition)
colnames(RI) <- c("RI", "condition")
# Summaries per condition
RIsummary <- RI %>%
group_by(condition) %>%
summarise(RI_mean = mean(RI), sd = sd(RI), se = sd(RI) / sqrt(nrow(timeDurationS2)))
# Data Wrangling
# Phase 2
wordList2 <- bind_rows(Session1$wordList_2, .id = "column_label")
phase2Answers <- unlist(rbind(Session1$phase2Answers))
# For some reason phase2Answers has an extra answer - due to participant error presumably (double click can cause this)
# Correctly aligned
phase2Answers <- phase2Answers[-c(3011) ]
phase2Answers <- tolower(phase2Answers)
RI5minPhase2 <- cbind(wordList2, phase2Answers)
IDS1 <- rep(Session1$subject, each = 40) %>%
as.data.frame() %>%
t()
RI5minPhase2$IDS1 <-  IDS1
RI5minPhase2 <-  RI5minPhase2[,-c(1)]
#Phase 3
# Remove backslashes and decapitalize answers
wordList3 <- bind_rows(Session2$wordList_3, .id = "column_label")
phase3Answers <- unlist(rbind(Session2$phase3Answers))
phase3Answers <- tolower(phase3Answers)
phase3Answers <- str_replace_all(phase3Answers, "/", "")
phase3Answers <- str_replace_all(phase3Answers, "\n", "")
phase3Answers  <- phase3Answers %>%
as.data.frame() %>%
filter(phase3Answers != 'na')
RI5minPhase3 <- cbind(wordList3, phase3Answers)
IDS2 <- rep(Session2$subject, each = 40) %>%
as.data.frame() %>%
t()
RI5minPhase3$IDS2 <-  IDS2
RI5minPhase3 <-  RI5minPhase3[,-c(1)]
#calculate if word answer is correct
RI5minPhase2 <- RI5minPhase2 %>%
mutate(retrieveACC = if_else(phase2Answers == target, 1, if_else(is.na(phase2Answers), 1, 0)))
RI5minPhase3 <- RI5minPhase3 %>%
mutate(retrieveACC = if_else(phase3Answers == target, 1, if_else(is.na(phase3Answers), 1, 0)))
#Calcualte Pc for phase 2
PcPhase2 <- RI5minPhase2 %>%
group_by(condition) %>%
filter(phase2Answers != "na") %>%
filter(retrieval == 2) %>%
summarise(PcFeedback = mean(retrieveACC))
# Merge retrieval condition from phase 2 - need to merge anonly keep same IDs
colnames(RI5minPhase2) <- c("cueS1", "targetS1", "retrievalS1", "type",
"RT", "condition", "phase2Answers", "IDS1", "ACCS1")
# Merge dfs together
RI5minPhase2$type <- NULL
cuedRecall <- merge(RI5minPhase3, RI5minPhase2, by = "row.names", all = F)
cuedRecall[,c(1:2,4:5,13,15,17)] <- NULL
# Reorder phase 3 based on phase 2
# Order Phase 3 targets
cuedRecallOrdered <- cuedRecall[cuedRecall$IDS2 %in% IDS1,]
target <- cuedRecallOrdered$target
cuedRecallOrdered <- cuedRecallOrdered[order(match(cuedRecallOrdered[[1]], target)), ]
# Order Phase 2 targets
phase2Ordered <- RI5minPhase2[RI5minPhase2$IDS1 %in% IDS2,]
phase2Ordered <- phase2Ordered[order(match(phase2Ordered[[1]], target)), ]
# reorder cuedRecallOrdered
cuedRecallOrdered <- cuedRecallOrdered[order(cuedRecallOrdered$IDS2, cuedRecallOrdered$target),]
phase2Ordered <- phase2Ordered[order(phase2Ordered$IDS1, phase2Ordered$targetS1),]
# Add in retrieval condition
cuedRecallOrdered$retrievalCondition <- phase2Ordered$retrieval
cuedRecallOrdered$IDS1 <- phase2Ordered$IDS1
cuedRecallOrdered$studyCondition <- phase2Ordered$condition
# Get proportion correct, sd, and se for each condition
dataSummary <- cuedRecallOrdered %>%
group_by(retrievalCondition, studyCondition) %>%
summarise(Pc = mean(retrieveACC), sd = sd(retrieveACC), se = sd(retrieveACC) / sqrt(nrow(cuedRecallOrdered)))
dataSummary$retrievalCOND <- c("Restudy", "Restudy", "Retrieval Feedback", "Retrieval Feedback")
Restudy <- cuedRecallOrdered %>%
group_by(IDS2) %>%
filter(retrievalCondition == 0) %>%
summarize(Pc = sum(retrieveACC / 20))
FeedBack <- cuedRecallOrdered %>%
group_by(IDS2) %>%
filter(retrievalCondition == 2) %>%
summarize(Pc = sum(retrieveACC / 20))
# Calculate TE
TEFeedback <- as.data.frame(FeedBack$Pc - Restudy$Pc)
TEFeedback <- cbind(TEFeedback, Restudy$Pc)
TEFeedback$studyCondition <- cuedRecallOrdered$studyCondition[seq(1, length(cuedRecallOrdered$studyCondition), 40)]
colnames(TEFeedback) <- c("TE", "Restudy", "studyCondition")
TE <- TEFeedback %>%
group_by(studyCondition) %>%
summarise(TEMag = mean(TE), sd = sd(TE), se = sd(TE) / sqrt(nrow(cuedRecall)))
colnames(TE)[1] <- "TE"
View(TEFeedback)
glimpse(TEFeedback)
# Plotting
# TE Scatters
ggplot(data = TEFeedback, aes(y = TE, x = Restudy, fill=studyCondition)) +
geom_point(aes(color = studyCondition)) +
stat_smooth(method = "lm", formula = y ~ x - I(x^2), size = 1) +
ggtitle("TE With Feedback 2 Day Retention Interval") +
theme_minimal()
# Pc all conditions2*PCr - PCr^2
ggplot(data = dataSummary, aes(y = Pc, x = retrievalCOND, fill = studyCondition)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=Pc-se, ymax=Pc+se), width=.2,
position=position_dodge(.9)) +
ggtitle("Pc All Conditions 2 Day Retention Interval") +
theme_minimal()
TEFeedback$ID <- as.factor(S2ID)
# Model Fit
# Means
TEFeedback$PC_t <- TEFeedback$Restudy + TEFeedback$TE
TEFeedback$DMMPredPC_t <- ((2 * TEFeedback$Restudy) - TEFeedback$Restudy^2)
TEFeedback$predDelta <- TEFeedback$DMMPredPC_t - TEFeedback$PC_t
TEFeedback$DMMTE <- TEFeedback$DMMPredPC_t - TEFeedback$Restudy
TESummary <- as.data.frame(c(TEFeedback$PC_t, TEFeedback$DMMPredPC_t, TEFeedback$Restudy))
TESummary$condition <- as.factor(c(TEFeedback$studyCondition, TEFeedback$studyCondition,
TEFeedback$studyCondition))
TESummary$DMM <- as.factor(c(rep("Test", nrow(RIS2)),
rep("Test - predicted", nrow(RIS2)),
rep("Restudy", nrow(RIS2))))
colnames(TESummary) <- c("TE", "studyCondition", "DMM")
TEMeans <- TESummary %>%
group_by(studyCondition, DMM) %>%
summarise(TEMean = mean(TE), sd = sd(TE), se = sd(TE) / sqrt(nrow(TESummary)))
TESummary$studyCondition <- as.factor(TESummary$studyCondition)
TESummary$DMM <- as.factor(TESummary$DMM)
ggplot(data = TEMeans, aes(y = TEMean, x = studyCondition, fill = DMM)) +
geom_bar(aes(fill = DMM), color = "black", stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=TEMean-se, ymax=TEMean+se), width=.2, position=position_dodge(.9)) +
ggtitle("Pc All Conditions 2 Day Retention Interval") +
scale_fill_grey(start = 0, end = .9)+
theme_bw()
ggplot(data = TE, aes(y = TEMag, x = TE, fill = TE)) +
geom_bar(aes(fill = TE), color = "black", stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=TEMag-se, ymax=TEMag+se), width=.2, position=position_dodge(.9)) +
ggtitle("TE Magnitude 2 Day Retention Interval") +
scale_fill_grey(start = 0, end = .9)+
theme_bw()
# Bins - 20 equal interval PCR bins spanning from zero to one, subject to the
# constraint that, for the large and less populated PCR values, each bin must contain at least 5 TE values;
ggplot(data = TEFeedback, aes(y = TE, x = Restudy)) +
geom_point() +
stat_summary_bin(fun='mean',
fun.min = function(x) mean(x) - sd(x) / length(x),
fun.max = function(x) mean(x) + sd(x) / length(x),
bins=20, color='blue', size=0.4, geom="pointrange") +
stat_summary_bin(data = TEFeedback, aes(y = DMMTE, x = Restudy), fun='mean',
fun.min = function(x) mean(x),
fun.max = function(x) mean(x),
bins=20, color='red', size = 1, geom="line", linetype = "dashed") +
ggtitle("TE With Feedback 2 Day Retention Interval") +
theme_minimal()
# qqplots
index <- 1
TESummary4x <- TESummary %>% filter(studyCondition == "4x")
ggplot(data = TESummary4x, aes(sample = TE, color=DMM)) +
stat_qq() +
scale_x_continuous(labels = c("0.0", "0.20", "0.40", "0.60", "0.80", "1.0"), breaks = (c(-3, -1.9, -0.8, 0.3, 1.4, 2.5))) +
theme_minimal() +
ggtitle("TE 4x Study 2 Day Retention Interval") +
xlab("quantile (proportion of subject at or below the cumulative proportion correct value)") +
ylab("Cumulative Proportion Correct")
TESummary8x <- TESummary %>% filter(studyCondition == "8x")
ggplot(data = TESummary8x, aes(sample = TE, color=DMM)) +
stat_qq() +
scale_x_continuous(labels = c("0.0", "0.20", "0.40", "0.60", "0.80", "1.0"), breaks = (c(-3, -1.9, -0.8, 0.3, 1.4, 2.5))) +
theme_minimal() +
ggtitle("TE 8x Study 2 Day Retention Interval") +
xlab("quantile (proportion of subject at or below the cumulative proportion correct value)") +
ylab("Cumulative Proportion Correct")
# ANOVA
# summary(aov(data = TEFeedback, TE ~ Restudy * studyCondition * PC_t + Error(ID)))
# summary(aov(data = TEFeedback, TE ~ Restudy *PC_t * studyCondition  +
#               Error( ( 1|Restudy + PC_t ) + (studyCondition))))
#
# # lmer(TE ~ 1 + Restudy + PC_t + studyCondition +  # Fixed effects
# #        (1|studyCondition) + # Random effects between participants
# #        (Restudy + PC_t | ID), # Random effects nested within participants
# #      data = TEFeedback, REML=TRUE) # Specifying data and estimation
#
# # Two-way mixed ANOVA test
# #fit <- lmer(TE ~ Restudy + (1 | ID) + (1 | ID:studyCondition), data = TEFeedback)
#
# t.test(RI ~ condition, data = RI, var.equal = T)
# JL:
# repeated measures approach
m.aov <- aov(TE ~ Restudy * studyCondition + Error(ID))
# Means
TEFeedback$PC_t <- TEFeedback$Restudy + TEFeedback$TE
TEFeedback$DMMPredPC_t <- ((2 * TEFeedback$Restudy) - TEFeedback$Restudy^2)
TEFeedback$predDelta <- TEFeedback$DMMPredPC_t - TEFeedback$PC_t
TEFeedback$DMMTE <- TEFeedback$DMMPredPC_t - TEFeedback$Restudy
TESummary <- as.data.frame(c(TEFeedback$PC_t, TEFeedback$DMMPredPC_t, TEFeedback$Restudy))
TESummary$condition <- as.factor(c(TEFeedback$studyCondition, TEFeedback$studyCondition,
TEFeedback$studyCondition))
TESummary$DMM <- as.factor(c(rep("Test", nrow(RIS2)),
rep("Test - predicted", nrow(RIS2)),
rep("Restudy", nrow(RIS2))))
colnames(TESummary) <- c("TE", "studyCondition", "DMM")
TEMeans <- TESummary %>%
group_by(studyCondition, DMM) %>%
summarise(TEMean = mean(TE), sd = sd(TE), se = sd(TE) / sqrt(nrow(TESummary)))
TESummary$studyCondition <- as.factor(TESummary$studyCondition)
TESummary$DMM <- as.factor(TESummary$DMM)
?AOV
?aov
# JL:
# repeated measures approach
with(TEFeedback, table(ID*Restudy))
# JL:
# repeated measures approach
with(TEFeedback, table(ID,Restudy))
with(TEFeedback, table(ID,studyCondition))
# JL:
# repeated measures approach
with(TEFeedback, table(ID,studyCondition))
m.aov <- aov(TE ~ Restudy * studyCondition + Error(ID/studyCondition), data =TEFeedback)
with(TEFeedback, table(ID,Restudy))
with(TEFeedback, table(ID,Restudy)) %>% plot
View(TEFeedback)
TEFeedback %>% group_by(ID) %>% summarize(n())
?try
matXvec <- function(m, v){
# assumes m is a length(v)*length(v) matrix
apply(1:length(v),1,function(i){
v[i]*m[,i]
})
}
mat <- matrix(rep(1,4),ncol=2)
mat
l <- 2
mat <- matrix(rep(1,l^2),ncol=l)
v <- rep(1,l)
vec <- rep(1,l)
mat
vec
matXvec(mat, vec)
?mappaly
?mapply
# assumes m is a length(v)*length(v) matrix
out <- rep(0,length(v))
matXvec <- function(m, v){
# assumes m is a length(v)*length(v) matrix
out <- rep(0,length(v))
for(i in 1:length(v)){
out <-  out + v[i]*m[,i]
}
out
}
l <- 2
mat <- matrix(rep(1,l^2),ncol=l)
vec <- rep(1,l)
matXvec(mat, vec)
mat%*%vec
#memory.limit(size=999999)
knitr::opts_chunk$set(echo = F, warning = F, message=F)
library(tidyverse)
library(rstan)
library(bayesplot)
library(loo)
load('../output/DE-fitData.rdata')
## should load:
## fit.de (stan fit object)
## pred.dat.de (predictions)
## coefs.de (coefficients) (parameters?)
pred.dat.de %>%
mutate(strategy = as.factor(strategy)) %>%
ggplot(aes(x = trial, color = strategy, group=strategy))+
geom_point(aes(y=RT))+
geom_line(aes(y=pred.RT.de), color = 'black')+
#geom_line(aes(y=pred.logRT.ps), color = 'blue')+
#geom_vline(aes(xintercept=first.correct.trial.item))+
facet_grid(subject~item)+
theme(text = element_text(size = 25),
legend.position='bottom')
pred.dat.de %>%
mutate(strategy = as.factor(strategy)) %>%
ggplot(aes(x = trial, color = strategy, group=strategy))+
geom_point(aes(y=RT))+
geom_line(aes(y=pred.RT.de, group = strategy), color = 'black')+
#geom_line(aes(y=pred.logRT.ps), color = 'blue')+
#geom_vline(aes(xintercept=first.correct.trial.item))+
facet_grid(subject~item)+
theme(text = element_text(size = 25),
legend.position='bottom')
pred.dat.de %>%
mutate(strategy = as.factor(strategy)) %>%
ggplot(aes(x = trial, color = strategy, group=strategy))+
geom_point(aes(y=RT))+
geom_line(aes(y=pred.RT.de, group = strategy), color = 'black')+
#geom_line(aes(y=pred.logRT.ps), color = 'blue')+
#geom_vline(aes(xintercept=first.correct.trial.item))+
facet_grid(subject~item)+
theme(text = element_text(size = 25),
legend.position='bottom')
pred.dat.de %>% group_by(subject,item, trial) %>% summarize(n())
pred.dat.de %>% group_by(subject,item, trial) %>% summarize(n=n(), mean=mean(n))
pred.dat.de %>% group_by(subject,item, trial) %>% summarize(n=n()) %>% pull(n)
pred.dat.de %>% group_by(subject,item, trial) %>% summarize(n=n()) %>% pull(n) %>% mean()
pred.dat.de %>%
mutate(strategy = as.factor(strategy)) %>%
ggplot(aes(x = trial, color = strategy, group=strategy))+
geom_point(aes(y=RT), size = 5)+
geom_line(aes(y=pred.RT.de, group = strategy), size = 5, color = 'black')+
#geom_line(aes(y=pred.logRT.ps), color = 'blue')+
#geom_vline(aes(xintercept=first.correct.trial.item))+
facet_grid(subject~item)+
theme(text = element_text(size = 25),
legend.position='bottom')
pred.dat.de %>%
mutate(strategy = as.factor(strategy)) %>%
ggplot(aes(x = trial, color = strategy))+
geom_point(aes(y=RT), size = 5)+
geom_line(aes(y=pred.RT.de), size = 5, color = 'black')+
#geom_line(aes(y=pred.logRT.ps), color = 'blue')+
#geom_vline(aes(xintercept=first.correct.trial.item))+
facet_grid(subject~item)+
theme(text = element_text(size = 25),
legend.position='bottom')
pred.dat.de %>%
mutate(strategy = as.factor(strategy)) %>%
ggplot(aes(x = trial, color = strategy))+
geom_point(aes(y=RT), size = 5)+
geom_line(aes(y=pred.RT.de), size = 2, color = 'black')+
#geom_line(aes(y=pred.logRT.ps), color = 'blue')+
#geom_vline(aes(xintercept=first.correct.trial.item))+
facet_grid(subject~item)+
theme(text = element_text(size = 25),
legend.position='bottom')
pred.dat.de %>%
mutate(strategy = as.factor(strategy)) %>%
ggplot(aes(x = trial, color = strategy))+
geom_point(aes(y=RT), size = 5)+
geom_line(aes(y=pred.RT.de), size = 2, color = 'black')+
#geom_line(aes(y=pred.logRT.ps), color = 'blue')+
#geom_vline(aes(xintercept=first.correct.trial.item))+
facet_grid(subject~item)+
theme(text = element_text(size = 25),
legend.position='bottom')
pred.dat.de %>%
mutate(strategy = as.factor(strategy)) %>%
ggplot(aes(x = trial, color = strategy))+
geom_point(aes(y=RT), size = 1.5)+
geom_line(aes(y=pred.RT.de), size = 2, color = 'black')+
#geom_line(aes(y=pred.logRT.ps), color = 'blue')+
#geom_vline(aes(xintercept=first.correct.trial.item))+
facet_grid(subject~item)+
theme(text = element_text(size = 25),
legend.position='bottom')
stan_diag(fit.de,
information = c("sample","stepsize", "treedepth","divergence"))
pred.dat.de %>%
mutate(strategy = as.factor(strategy)) %>%
ggplot(aes(x = trial, color = strategy))+
geom_point(aes(y=RT), size = 1.5)+
geom_line(aes(y=pred.RT.de), size = 2, color = 'black')+
#geom_line(aes(y=pred.logRT.ps), color = 'blue')+
#geom_vline(aes(xintercept=first.correct.trial.item))+
facet_grid(subject~item)+
theme(text = element_text(size = 25),
legend.position='bottom')
pred.dat.de %>%
mutate(strategy = as.factor(strategy)) %>%
ggplot(aes(x = trial, color = strategy))+
geom_point(aes(y=RT), size = 1.5)+
geom_line(aes(y=pred.RT.de), size = 2, color = 'black')+
#geom_line(aes(y=pred.logRT.ps), color = 'blue')+
#geom_vline(aes(xintercept=first.correct.trial.item))+
facet_grid(subject~item)+
theme(text = element_text(size = 15),
legend.position='bottom')
pred.dat.de %>%
mutate(strategy = as.factor(strategy)) %>%
ggplot(aes(x = trial, color = strategy))+
geom_point(aes(y=RT), size = 1.5)+
geom_line(aes(y=pred.RT.de), size = 1, color = 'black')+
#geom_line(aes(y=pred.logRT.ps), color = 'blue')+
#geom_vline(aes(xintercept=first.correct.trial.item))+
facet_grid(subject~item)+
theme(text = element_text(size = 15),
legend.position='bottom')
print(fit.de@stanmodel)
summary(fit.de)
summary(fit.de)$summary
sum.de <- summary(fit.de)$summary
str(sum.de)
sum.de <- summary(fit.de)$summary %>% as.tibble()
sum.de <- summary(fit.de)$summary %>% as_tibble()
View(sum.de)
params <- rownames(sum.de)
sum.de <- summary(fit.de)$summary
params <- rownames(sum.de)
sum.de <- bind_cols(params, sum.de) %>% as_tibble()
params
sum.de <- cbind(params, sum.de) %>% as_tibble()
sum.de <- summary(fit.de)$summary
params <- rownames(sum.de)
sum.de <- cbind(params, sum.de) %>% as_tibble()
sum.de
# stan_diag(fit.de,
#             information = c("sample","stepsize", "treedepth","divergence"))
sum.de <- summary(fit.de)$summary
param <- rownames(sum.de)
sum.de <- cbind(param, sum.de) %>% as_tibble()
sum.de
# stan_diag(fit.de,
#             information = c("sample","stepsize", "treedepth","divergence"))
glimpse(sum.de)
?tidyverse
?stringr
stringr::str_sub('A_es[1]',1,1)
firstLetterMatch <- function(s,l){
# decide if s[1] == l
stringr::str_sub(s,1,1) == l
}
firstLetterMatch('A_es[1]','A')
firstLetterMatch('A_es[1]','B')
starts_with('alpha','a\')
starts_with('alpha','a\')
starts_with('alpha','a')
startsWith('alpha','a')
sum.de %>%
filter(!startsWith(param, 'y_hat') &
!startsWith(param, 'logLik'))
sum.de %>%
filter(!startsWith(param, 'y_hat') &
!startsWith(param, 'logLik')) %>% View
?case_when
sum.de <- sum.de %>%
filter(!startsWith(param, 'y_hat') &
!startsWith(param, 'logLik'))# %>%
firstLetterMatch <- function(s,l){
# decide if s[1] == l
stringr::str_sub(s,1,1) == l
}
sum.de <- summary(fit.de)$summary
param <- rownames(sum.de)
sum.de <- cbind(param, sum.de) %>% as_tibble()
sum.de <- sum.de %>%
filter(!startsWith(param, 'y_hat') &
!startsWith(param, 'logLik')) %>%
rowwise() %>%
mutate(Parameter = case_when(firstLetterMatch(param, 'A') ~ 'Alpha',
firstLetterMatch(param, 'B') ~ 'Beta',
firstLetterMatch(param, 'T') ~ 'Tau',
firstLetterMatch(param, 'R') ~ 'Rate',
firstLetterMatch(param, 'sigma') ~ 'Alpha',
TRUE ~ 'Transformed'))
#ggplot(sum.de, aes(x = ))
firstLetterMatch('alpha','al')
firstLetterMatch <- function(s,l){
# decide if s[starts with] == l
stringr::str_sub(s,1,1) == l
}
sum.de <- summary(fit.de)$summary
param <- rownames(sum.de)
sum.de <- cbind(param, sum.de) %>% as_tibble()
sum.de <- sum.de %>%
filter(!startsWith(param, 'y_hat') &
!startsWith(param, 'logLik')) %>%
rowwise() %>%
mutate(Parameter = case_when(startsWith(param, 'A') ~ 'Alpha',
startsWith(param, 'B') ~ 'Beta',
startsWith(param, 'T') ~ 'Tau',
startsWith(param, 'R') ~ 'Rate',
startsWith(param, 'sigma') ~ 'Alpha',
startsWith(param, 'lp_') ~ 'Log Posterior',
TRUE ~ 'Transformed'))
#ggplot(sum.de, aes(x = ))
sum.de %>%
ggplot(aes(x = param, y = Rhat))+
geom_col()
